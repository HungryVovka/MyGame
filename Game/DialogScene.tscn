[gd_scene load_steps=7 format=3 uid="uid://bckh1hneodvqm"]

[ext_resource type="PackedScene" uid="uid://dr1yr87qslefe" path="res://addons/DialogHelperTool/Game/VideoPlayer/VideoPlayer.tscn" id="4_xlldn"]
[ext_resource type="PackedScene" uid="uid://brwri52cvrt25" path="res://addons/DialogHelperTool/Game/Background/BackgroundCompose.tscn" id="5_q40dq"]
[ext_resource type="PackedScene" uid="uid://bqvgut40x8oo3" path="res://addons/DialogHelperTool/Game/Person/PersonLayout.tscn" id="6_dia5w"]
[ext_resource type="PackedScene" uid="uid://digxc7fp286c2" path="res://addons/DialogHelperTool/Game/TextArea/TextArea.tscn" id="7_6bc4b"]
[ext_resource type="PackedScene" uid="uid://civ12v0wc52bt" path="res://addons/DialogHelperTool/Game/ChoiceControl/ChoiceBlock/ChoicesBlock.tscn" id="8_lvyab"]

[sub_resource type="GDScript" id="GDScript_i37b5"]
script/source = "extends Control

@onready var textArea = $TextAreaContainer/TextArea
@onready var dialogManager
@onready var audioManager
@onready var backgrounds = []
@onready var choicesBlocks = []
@onready var videoPlayers = []
@onready var choiceSceneContainer = $CustomChoiceSceneContainer
@onready var persons = []

@export var clickable_background = false

@export_file(\"*.json\") var fn: String
@export_file(\"*.tscn\") var loading_scene

var choiceSceneChild: Node

var scene_root = \"\"
var scene_ready = false
var scene_src_params = {}

var LayoutManager = preload(\"res://addons/DialogHelperTool/Shared/LayoutManager.gd\").new()

var typeD : Dictionary = {
	\"date\": \"string\",
	\"scene\": \"string\",
	\"timeline\": \"string\",
	\"preview\": \"string\",
	\"state\": \"dict\",
}

func _ready():
	connectControls()
	for c in choicesBlocks:
		c.visible = false
	dialogManager = preload(\"res://addons/DialogHelperTool/Game/DialogManager/DialogManager.tscn\").instantiate()
	add_child(dialogManager)
	dialogManager.connect(\"end\", on_dialog_manager_end)
	dialogManager.connect(\"personAnimation\", person_animation)
	dialogManager.connect(\"personSource\", set_person_source)
	dialogManager.connect(\"personVisible\", set_person_visible)
	dialogManager.connect(\"playSound\", on_dialog_manager_play_sound)
	dialogManager.connect(\"playVideo\", on_dialog_manager_play_video)
	dialogManager.connect(\"resetCharacter\", on_dialog_manager_reset_character)
	dialogManager.connect(\"setBackground\", on_dialog_manager_set_background)
	dialogManager.connect(\"setBackgroundClickable\", on_dialog_manager_set_background_clickable)
	dialogManager.connect(\"showChoices\", on_dialog_manager_show_choices)
	dialogManager.connect(\"stopSound\", on_dialog_manager_stop_sound)
	dialogManager.connect(\"stopVideo\", on_dialog_manager_stop_video)
	dialogManager.connect(\"updateCharacter\", on_dialog_manager_update_character)
	dialogManager.connect(\"updateText\", on_dialog_manager_update_text)
	dialogManager.timeline = fn
	
	audioManager = preload(\"res://addons/DialogHelperTool/Game/AudioManager/AudioManager.tscn\").instantiate()
	add_child(audioManager)

	var timer = Timer.new()
	timer.one_shot = true
	timer.timeout.connect(
		func():
			scene_ready = true
			)
	add_child(timer)
	timer.start(1)
	
func connectControls():
	backgrounds = LayoutManager.findControlsInChildren(self, \"BACKGROUND\")
	choicesBlocks = LayoutManager.findControlsInChildren(self, \"CHOICES_BLOCK\")
	videoPlayers = LayoutManager.findControlsInChildren(self, \"VIDEOPLAYER\")
	persons = LayoutManager.findControlsInChildren(self, \"PERSON_LAYOUT\")
	textArea = LayoutManager.findControlsInChildren(self, \"TEXT_AREA\", true)
	
	for b in backgrounds: 
		b.connect(\"gui_input\", _on_background_gui_input)
	for c in choicesBlocks:
		c.connect(\"choiceClicked\", _on_choices_block_choice_clicked)
	if textArea:
		textArea.connect(\"on_next\", _on_text_area_on_next)

func save():
	var result = {
		\"date\": Time.get_datetime_string_from_system(false, true),
		\"scene\": scene_src_params[\"scene_name\"],
		\"timeline\": scene_src_params[\"timeline_name\"],
		\"state\": DialogState.getState(),
		\"clickable_background\": clickable_background
	}
	var img: Image = get_viewport().get_texture().get_image()
	img.resize(480, 270)
	var data : PackedByteArray = img.save_png_to_buffer()
	result.preview = Marshalls.raw_to_base64(data)
	return result

func setDialogParams(dict: Dictionary):
	for b in backgrounds:
		b.reset_shaders()
	clickable_background = dict.clickable_background
	for c in choicesBlocks:
		c.visible = false
	dialogManager.videos_list = dict.videos
	dialogManager.background_list = dict.backgrounds
	dialogManager.character_list = dict.characters
	audioManager.resources = dict.sounds
	dialogManager.timeline = dict.timeline
	dialogManager.reset_index()
	scene_root = dict.scene_root
	scene_src_params = dict
	dialogManager.play_next_event()

func set_person_source(obj: String, src):
	persons.set_person_source(obj, src)

func set_person_visible(obj: String, v: bool):
	persons.set_person_visible(obj, v)
		
func person_animation(obj: String, type: String = \"dir\", animation: String = \"RESET\", time: float = 1.0, backwards: bool = false):
	persons.person_animation(obj, type, animation, time, backwards)
	
func _process(_delta):
	pass

func on_dialog_manager_end():
	textArea.resetCharacter()
	textArea.text = \"\"
	if DialogState.gs(\"_next_timeline\") != \"\":
		for c in choicesBlocks:
			c.visible = false
		dialogManager.timeline = scene_root + \"timelines/\" + DialogState.gs(\"_next_timeline\") + \".json\"
		dialogManager.reset_index()
		print(\"end\")
		dialogManager.play_next_event()
		return
	if DialogState.gs(\"_next_scene\") != \"\":
		get_tree().change_scene_to_file(loading_scene)

func on_dialog_manager_reset_character():
	textArea.resetCharacter()

func on_dialog_manager_update_character(portrait, character_name):
	textArea.setCharacter(portrait, character_name)

func on_dialog_manager_update_text(text):
	textArea.text = text

func on_dialog_manager_set_background(res, has_background, params):
	for b in backgrounds:
		b.set_background(res, has_background, params)

func on_dialog_manager_set_background_clickable(value):
	clickable_background = value

func on_dialog_manager_play_sound(_name, channel, loop, bus, volume, fade):
	audioManager.play(_name, channel, loop, bus, volume, fade)

func on_dialog_manager_stop_sound(channel):
	audioManager.stop(channel)

func on_dialog_manager_show_choices(data):
	if !data.has(\"scene\"):
		for c in choicesBlocks:
			c.set_choices(data.choices)
			c.visible = true
	else:
		if choiceSceneChild:
			choiceSceneChild.get_parent().remove_child(choiceSceneChild)
			choiceSceneChild.queue_free()
			choiceSceneChild = null
		choiceSceneChild = load(data.scene).instantiate()
		choiceSceneContainer.add_child(choiceSceneChild)
		choiceSceneChild.choices = data
		choiceSceneChild.connect(\"make_choice\", scene_make_choice)

func on_dialog_manager_play_video(res):
	for v in videoPlayers:
		v.visible = true
		v.play(res)

func on_dialog_manager_stop_video():
	for v in videoPlayers:
		v.visible = false
		v.stop()

func scene_make_choice(id: String):
	dialogManager.make_choice(id, id)
	if !dialogManager.is_choice:
		for c in choicesBlocks:
			c.visible = false
		choiceSceneChild.get_parent().remove_child(choiceSceneChild)
		choiceSceneChild.queue_free()
		choiceSceneChild = null
		
func choice_mode():
	if choiceSceneChild:
		return true
	for c in choicesBlocks:
		if c.visible:
			return true
	return false

func _on_text_area_on_next():
	if !scene_ready:
		return
	if !clickable_background && textArea.text == \"\":
		return
	if !choice_mode():
		dialogManager.play_next_event()
		
func _on_background_gui_input(event):
	if !scene_ready:
		return
	if event is InputEventMouseButton \\
		&& clickable_background \\
		&& !choice_mode() \\
		&& event.button_index == MOUSE_BUTTON_LEFT \\
		&& event.pressed == true:
		dialogManager.play_next_event()

func _on_choices_block_choice_clicked(id, text):
	dialogManager.make_choice(id, text)
	if !dialogManager.is_choice:
		for c in choicesBlocks:
			c.visible = false
"

[node name="Control" type="Control"]
layout_direction = 1
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = SubResource("GDScript_i37b5")

[node name="VideoPlayer" parent="." instance=ExtResource("4_xlldn")]
layout_mode = 1

[node name="Background" parent="." instance=ExtResource("5_q40dq")]
layout_mode = 1
mouse_filter = 1

[node name="PersonLayout" parent="." instance=ExtResource("6_dia5w")]
layout_mode = 1
mouse_filter = 2

[node name="CustomChoiceSceneContainer" type="Control" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2

[node name="TextAreaContainer" type="Control" parent="."]
layout_mode = 1
anchor_left = 0.094
anchor_top = 0.685
anchor_right = 0.896
anchor_bottom = 0.947
offset_left = -0.480008
offset_top = 0.199933
offset_right = -0.320053
offset_bottom = 0.239971
grow_horizontal = 2
grow_vertical = 2

[node name="TextArea" parent="TextAreaContainer" instance=ExtResource("7_6bc4b")]
layout_mode = 1
size_flags_vertical = 1
mouse_filter = 1

[node name="ChoicesBlock" parent="." instance=ExtResource("8_lvyab")]
layout_mode = 1
anchors_preset = -1
anchor_left = 0.723
anchor_top = 0.039
anchor_right = 0.945
anchor_bottom = 0.67
offset_left = -0.160095
offset_top = -0.120001
offset_right = 0.600014
offset_bottom = 0.399982
